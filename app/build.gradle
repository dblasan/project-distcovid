apply plugin: 'com.android.application'
apply plugin: 'jacoco' // Jacoco plugin
android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.rulan.project_distcovid"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        maxSdkVersion 28
        signingConfig signingConfigs.debug
    }
    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

// jacoco configurations
ext{
    coverageSourceDirs = 'app/src/test/java'
}

jacoco{
    toolVersion "0.8.5"
    reportsDir = file("$buildDir/reports")
}
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']){
    group = "Reporting"
    description = "Generate Jacoco reports for Debug and Build"

    // define type of reports to generate
    reports{
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
    }

    def excludeFiles = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewBinder*.*',
            '**/*$InjectAdapter*.*',
            '**/*Injector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
           // '**/*Test*.*',
           // 'android/**/*.*',
           // 'com/**/*.*',
           // 'androidTest/**/*.*',
           // '**/data/model/*'
    ]

    if (project.hasProperty("teamcity")) {
        println '##teamcity[jacocoReport ' +
                'dataPath=\'app/build/jacoco/testDebugUnitTest.exec\' ' +
                'includes=\'com.rulan.project_distcovid.*\' ' +
                'excludes=\'**/R.class **/R$*.class ' +
                '**/*$ViewInjector*.* **/BuildConfig.* **/Manifest*.*\']'
    }

    def debugTree = fileTree(
            dir:"${buildDir}/intermediates/classes/debug",
            excludes: excludeFiles
    )

    def mainSrc = "${project.projectDir}/app/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'app/build/jacoco/testDebugUnitTest.exec'
    ])

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.3.0-beta01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-beta01'
}
